AWSTemplateFormatVersion: 2010-09-09

Parameters:
  # ------------------------------------------------------------#
  # Import Master.yaml template
  # ------------------------------------------------------------#
  ImageId:
    Description: Enter the AMI ID of the EC2 instance.
    Type: String
  AllowIP:
    Description: Enter the global IP of the terminal to be tested
    Type: String
  NeedSSMAccess:
    Description: If enabled, SSM access to the instance will be available
    Type: String
    AllowedValues: [true, false]
  # ------------------------------------------------------------#
  # Import BaseVPC stack(aws-vpc.template.yaml file)
  # ------------------------------------------------------------#
  VPCId:
    Description: Enter the VPC ID where you want to deploy the EC2 instance.
    Type: String
  PrivateSubnet1ID:
    Description: Enter the Private Subnet ID where you want to deploy the EC2 instance.
    Type: String
  PublicSubnet1ID:
    Description: Enter the Public Subnet ID where you want to deploy the ALB
    Type: String
  PublicSubnet2ID:
    Description: Enter the Public Subnet ID where you want to deploy the ALB
    Type: String
    
# ------------------------------------------------------------#
# Conditions
# ------------------------------------------------------------#
Conditions:
  NeedSSM: 
    !Equals [true, !Ref NeedSSMAccess]

Resources:
  # ------------------------------------------------------------#
  # Resources for when you need SSM Access, Create IAM Role and Instance Profile
  # ------------------------------------------------------------#
  EC2Role:
    Condition: NeedSSM
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: 
        Fn::Join:
          - ""
          - - Fn::Select:
              - 2
              - Fn::Split:
                - "-"
                - !Ref AWS::StackName
            - "-EC2Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  InstanceProfile:
    Condition: NeedSSM
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  # ------------------------------------------------------------#
  # Create EC2 Instance
  # ------------------------------------------------------------#
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !If
        - NeedSSM
        - !Ref InstanceProfile
        - !Ref AWS::NoValue
      SubnetId: !Ref PrivateSubnet1ID
      Tags:
        - Key: Name
          Value: 
            Fn::Join:
              - ""
              - - Fn::Select:
                  - 2
                  - Fn::Split:
                    - "-"
                    - !Ref AWS::StackName
                - "-EC2"
      UserData: 
        !Base64 |
          #!/bin/bash
          amazon-linux-extras install nginx1.12 -y
          systemctl start nginx
          systemctl enable nginx

  # ------------------------------------------------------------#
  # Create 2 Security Group for EC2 Instance and ALB
  # ------------------------------------------------------------#
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 
        Fn::Join:
          - ""
          - - Fn::Select:
              - 2
              - Fn::Split:
                - "-"
                - !Ref AWS::StackName
            - "-EC2-SG"
      GroupDescription: Used Web Server
      VpcId: !Ref VPCId
      SecurityGroupIngress: 
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: 
            Fn::Join:
              - ""
              - - Fn::Select:
                  - 2
                  - Fn::Split:
                    - "-"
                    - !Ref AWS::StackName
                - "-EC2-SG"
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 
        Fn::Join:
          - ""
          - - Fn::Select:
              - 2
              - Fn::Split:
                - "-"
                - !Ref AWS::StackName
            - "-ALB-SG"
      GroupDescription: Used ALB
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowIP
        - 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowIP
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::Select:
                  - 2
                  - Fn::Split:
                    - "-"
                    - !Ref AWS::StackName
                - "-ALB-SG"

  # ------------------------------------------------------------#
  # Create ALB (Only HTTP)
  # ------------------------------------------------------------#
  TargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      VpcId: !Ref VPCId
      Name: 
        Fn::Join:
          - ""
          - - Fn::Select:
              - 2
              - Fn::Split:
                - "-"
                - !Ref AWS::StackName
            - "-TG"
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher: 
        HttpCode: 200
      Targets: 
        - Id: !Ref EC2Instance
          Port: 80
  InternetALB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: 
        Fn::Join:
          - ""
          - - Fn::Select:
              - 2
              - Fn::Split:
                - "-"
                - !Ref AWS::StackName
            - "-ALB"
      Scheme: internet-facing
      LoadBalancerAttributes: 
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 4000
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
  ALBListenerHTTP: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
#        - Type: redirect
#          RedirectConfig: 
#            Host: '#{host}'
#            Path: '/#{path}'
#            Port: 443
#            Protocol: HTTPS
#            Query: '#{query}'
#            StatusCode: HTTP_301
      LoadBalancerArn: !Ref InternetALB

Outputs:
  TargetGroupID:
    Value: !Ref TargetGroup
    Description: Target group ID of ALB
  ALBID:
    Value: !Ref InternetALB
    Description: ID of ALB
  HTTPWebSiteURL:
    Value: !GetAtt InternetALB.DNSName
    Description: URL to access the web server (HTTP)
  HostedZoneId:
    Value: !GetAtt InternetALB.CanonicalHostedZoneID
    Description: Hosted Zone ID of ALB
  InstanceProfile:
    Condition: NeedSSM
    Value: !Ref InstanceProfile
    Description: Instance profile to be used for SSM access